"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Discord –±–æ—Ç–∞
–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

import discord
from discord.ext import commands
import logging
import asyncio
import json
import os
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Any
import traceback
import psutil
import platform
import aiohttp
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_logs.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class EnhancedLoggingSystem:
    def __init__(self, bot):
        self.bot = bot
        self.log_channel_id = 1376194575281950741  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_channel = None
        self.enabled = True
        self.stats = {
            'commands_used': 0,
            'messages_sent': 0,
            'errors_occurred': 0,
            'members_joined': 0,
            'members_left': 0,
            'moderation_actions': 0,
            'start_time': datetime.utcnow(),
            'uptime': timedelta(0)
        }
        self.error_log = []
        self.performance_log = []
        self.command_log = []
        
    async def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.log_channel = self.bot.get_channel(self.log_channel_id)
            if not self.log_channel:
                logger.error(f"–ö–∞–Ω–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.log_channel_id}")
                return False
            
            logger.info(f"–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {self.log_channel.name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
            await self.log_system_startup()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def log_system_startup(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        embed = discord.Embed(
            title="üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞",
            description="–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        embed.add_field(
            name="üíª –°–∏—Å—Ç–µ–º–∞",
            value=f"OS: {platform.system()} {platform.release()}\nPython: {platform.python_version()}",
            inline=True
        )
        
        embed.add_field(
            name="ü§ñ –ë–æ—Ç",
            value=f"Discord.py: {discord.__version__}\n–ü–∏–Ω–≥: {round(self.bot.latency * 1000)}ms",
            inline=True
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–°–µ—Ä–≤–µ—Ä–æ–≤: {len(self.bot.guilds)}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.bot.users)}",
            inline=True
        )
        
        await self.send_log(embed)
    
    async def log_command_usage(self, ctx, command_name: str, execution_time: float):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.stats['commands_used'] += 1
        
        embed = discord.Embed(
            title="‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
            description=f"–ö–æ–º–∞–Ω–¥–∞ `{command_name}` –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞",
            color=0x0099ff,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            value=f"{ctx.author.mention}\nID: {ctx.author.id}",
            inline=True
        )
        
        embed.add_field(
            name="üì∫ –ö–∞–Ω–∞–ª",
            value=f"{ctx.channel.mention}\nID: {ctx.channel.id}",
            inline=True
        )
        
        embed.add_field(
            name="‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            value=f"{execution_time:.2f}ms",
            inline=True
        )
        
        embed.add_field(
            name="üîó –°–æ–æ–±—â–µ–Ω–∏–µ",
            value=f"[–ü–µ—Ä–µ–π—Ç–∏]({ctx.message.jump_url})",
            inline=True
        )
        
        embed.add_field(
            name="üè∑Ô∏è –°–µ—Ä–≤–µ—Ä",
            value=f"{ctx.guild.name}\nID: {ctx.guild.id}",
            inline=True
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {self.stats['commands_used']}",
            inline=True
        )
        
        await self.send_log(embed)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥
        self.command_log.append({
            'timestamp': datetime.utcnow().isoformat(),
            'command': command_name,
            'user_id': ctx.author.id,
            'user_name': ctx.author.name,
            'channel_id': ctx.channel.id,
            'guild_id': ctx.guild.id,
            'execution_time': execution_time
        })
    
    async def log_member_join(self, member):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        self.stats['members_joined'] += 1
        
        embed = discord.Embed(
            title="üéâ –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è",
            description=f"{member.mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è:** {member.name}\n**ID:** {member.id}\n**–°–æ–∑–¥–∞–Ω:** <t:{int(member.created_at.timestamp())}:R>",
            inline=True
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            value=f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {member.guild.member_count}\n**–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å:** {self.stats['members_joined']}",
            inline=True
        )
        
        embed.add_field(
            name="üîç –î–µ—Ç–∞–ª–∏",
            value=f"**–ë–æ—Ç:** {'–î–∞' if member.bot else '–ù–µ—Ç'}\n**–ê–∫–∫–∞—É–Ω—Ç:** {'–ù–æ–≤—ã–π' if (datetime.utcnow() - member.created_at).days < 7 else '–°—Ç–∞—Ä—ã–π'}",
            inline=True
        )
        
        if member.display_avatar:
            embed.set_thumbnail(url=member.display_avatar.url)
        
        await self.send_log(embed)
    
    async def log_member_leave(self, member):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        self.stats['members_left'] += 1
        
        embed = discord.Embed(
            title="üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä",
            description=f"{member.mention} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä",
            color=0xff6b35,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è:** {member.name}\n**ID:** {member.id}\n**–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** <t:{int(member.joined_at.timestamp())}:R>",
            inline=True
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            value=f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {member.guild.member_count}\n**–ü–æ–∫–∏–Ω—É–ª–æ:** {self.stats['members_left']}",
            inline=True
        )
        
        embed.add_field(
            name="‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
            value=f"{(datetime.utcnow() - member.joined_at).days} –¥–Ω–µ–π",
            inline=True
        )
        
        if member.display_avatar:
            embed.set_thumbnail(url=member.display_avatar.url)
        
        await self.send_log(embed)
    
    async def log_error(self, error: Exception, context: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
        self.stats['errors_occurred'] += 1
        
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(error).__name__}",
            color=0xff0000,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç",
            value=context,
            inline=False
        )
        
        embed.add_field(
            name="üìù –°–æ–æ–±—â–µ–Ω–∏–µ",
            value=str(error)[:1000],
            inline=False
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫",
            value=f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {self.stats['errors_occurred']}",
            inline=True
        )
        
        # –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ —Ç—Ä–µ–π—Å –≤ —Ñ–∞–π–ª
        error_info = {
            'timestamp': datetime.utcnow().isoformat(),
            'error_type': type(error).__name__,
            'error_message': str(error),
            'context': context,
            'traceback': traceback.format_exc()
        }
        
        self.error_log.append(error_info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('error_log.json', 'w', encoding='utf-8') as f:
            json.dump(self.error_log, f, ensure_ascii=False, indent=2)
        
        await self.send_log(embed)
    
    async def log_performance(self, operation: str, duration: float, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π"""
        embed = discord.Embed(
            title="‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            description=f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation}",
            color=0xffff00 if duration > 1.0 else 0x00ff00,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            value=f"{duration:.3f} —Å–µ–∫—É–Ω–¥",
            inline=True
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å",
            value="‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ" if duration > 1.0 else "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
            inline=True
        )
        
        if details:
            embed.add_field(
                name="üîç –î–µ—Ç–∞–ª–∏",
                value=details,
                inline=False
            )
        
        await self.send_log(embed)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥
        self.performance_log.append({
            'timestamp': datetime.utcnow().isoformat(),
            'operation': operation,
            'duration': duration,
            'details': details
        })
    
    async def log_moderation_action(self, action_type: str, moderator, target, reason: str = "", details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        self.stats['moderation_actions'] += 1
        
        color_map = {
            'ban': 0xff0000,
            'unban': 0x00ff00,
            'kick': 0xff6b35,
            'mute': 0xffff00,
            'unmute': 0x00ff00,
            'warn': 0xffa500,
            'timeout': 0xff6b35
        }
        
        embed = discord.Embed(
            title=f"üõ°Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {action_type}",
            description=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.mention} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ",
            color=color_map.get(action_type.lower(), 0x0099ff),
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            value=f"{moderator.mention}\nID: {moderator.id}",
            inline=True
        )
        
        embed.add_field(
            name="üéØ –¶–µ–ª—å",
            value=f"{target.mention}\nID: {target.id}",
            inline=True
        )
        
        embed.add_field(
            name="üìù –ü—Ä–∏—á–∏–Ω–∞",
            value=reason or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
            inline=True
        )
        
        if details:
            embed.add_field(
                name="üîç –î–µ—Ç–∞–ª–∏",
                value=details,
                inline=False
            )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {self.stats['moderation_actions']}",
            inline=True
        )
        
        await self.send_log(embed)
    
    async def log_system_status(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        self.stats['uptime'] = datetime.utcnow() - self.stats['start_time']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        cpu_percent = psutil.cpu_percent()
        memory = psutil.virtual_memory()
        
        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
            description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞",
            color=0x0099ff,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
            value=str(self.stats['uptime']).split('.')[0],
            inline=True
        )
        
        embed.add_field(
            name="üíª CPU",
            value=f"{cpu_percent}%",
            inline=True
        )
        
        embed.add_field(
            name="üß† –ü–∞–º—è—Ç—å",
            value=f"{memory.percent}%",
            inline=True
        )
        
        embed.add_field(
            name="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–ö–æ–º–∞–Ω–¥: {self.stats['commands_used']}\n–°–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_sent']}\n–û—à–∏–±–æ–∫: {self.stats['errors_occurred']}",
            inline=True
        )
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: {self.stats['members_joined']}\n–ü–æ–∫–∏–Ω—É–ª–æ: {self.stats['members_left']}",
            inline=True
        )
        
        embed.add_field(
            name="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è",
            value=f"–î–µ–π—Å—Ç–≤–∏–π: {self.stats['moderation_actions']}",
            inline=True
        )
        
        await self.send_log(embed)
    
    async def log_message_activity(self, message, action: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.stats['messages_sent'] += 1
        
        embed = discord.Embed(
            title=f"üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π: {action}",
            description=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author.mention}",
            color=0x0099ff,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üë§ –ê–≤—Ç–æ—Ä",
            value=f"{message.author.mention}\nID: {message.author.id}",
            inline=True
        )
        
        embed.add_field(
            name="üì∫ –ö–∞–Ω–∞–ª",
            value=f"{message.channel.mention}\nID: {message.channel.id}",
            inline=True
        )
        
        embed.add_field(
            name="üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ",
            value=message.content[:100] + "..." if len(message.content) > 100 else message.content,
            inline=False
        )
        
        embed.add_field(
            name="üîó –°—Å—ã–ª–∫–∞",
            value=f"[–ü–µ—Ä–µ–π—Ç–∏]({message.jump_url})",
            inline=True
        )
        
        await self.send_log(embed)
    
    async def log_voice_activity(self, member, before, after):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö"""
        embed = discord.Embed(
            title="üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            description=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è {member.mention}",
            color=0x0099ff,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üë§ –£—á–∞—Å—Ç–Ω–∏–∫",
            value=f"{member.mention}\nID: {member.id}",
            inline=True
        )
        
        if before.channel and after.channel:
            embed.add_field(
                name="üîÑ –ü–µ—Ä–µ—Ö–æ–¥",
                value=f"–ò–∑ {before.channel.name} –≤ {after.channel.name}",
                inline=True
            )
        elif before.channel and not after.channel:
            embed.add_field(
                name="üö™ –í—ã—Ö–æ–¥",
                value=f"–ü–æ–∫–∏–Ω—É–ª {before.channel.name}",
                inline=True
            )
        elif not before.channel and after.channel:
            embed.add_field(
                name="üö™ –í—Ö–æ–¥",
                value=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ {after.channel.name}",
                inline=True
            )
        
        embed.add_field(
            name="üîá –°–æ—Å—Ç–æ—è–Ω–∏–µ",
            value=f"–ú—É—Ç: {'–î–∞' if after.mute else '–ù–µ—Ç'}\n–ó–∞–≥–ª—É—à–µ–Ω–∏–µ: {'–î–∞' if after.deaf else '–ù–µ—Ç'}",
            inline=True
        )
        
        await self.send_log(embed)
    
    async def log_reaction_activity(self, payload, action: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π"""
        embed = discord.Embed(
            title=f"üòÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π: {action}",
            description=f"–†–µ–∞–∫—Ü–∏—è {payload.emoji}",
            color=0x0099ff,
            timestamp=datetime.utcnow()
        )
        
        user = self.bot.get_user(payload.user_id)
        channel = self.bot.get_channel(payload.channel_id)
        guild = self.bot.get_guild(payload.guild_id)
        
        embed.add_field(
            name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            value=f"{user.mention if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\nID: {payload.user_id}",
            inline=True
        )
        
        embed.add_field(
            name="üì∫ –ö–∞–Ω–∞–ª",
            value=f"{channel.mention if channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\nID: {payload.channel_id}",
            inline=True
        )
        
        embed.add_field(
            name="üòÄ –≠–º–æ–¥–∑–∏",
            value=f"{payload.emoji}",
            inline=True
        )
        
        await self.send_log(embed)
    
    async def log_channel_activity(self, channel, action: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤"""
        embed = discord.Embed(
            title=f"üì∫ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞: {action}",
            description=f"–ö–∞–Ω–∞–ª {channel.mention}",
            color=0x0099ff,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üìù –ù–∞–∑–≤–∞–Ω–∏–µ",
            value=channel.name,
            inline=True
        )
        
        embed.add_field(
            name="üÜî ID",
            value=channel.id,
            inline=True
        )
        
        embed.add_field(
            name="üìã –¢–∏–ø",
            value=channel.type.name,
            inline=True
        )
        
        if hasattr(channel, 'topic') and channel.topic:
            embed.add_field(
                name="üìÑ –¢–µ–º–∞",
                value=channel.topic[:100] + "..." if len(channel.topic) > 100 else channel.topic,
                inline=False
            )
        
        await self.send_log(embed)
    
    async def log_role_activity(self, role, action: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–æ–ª–µ–π"""
        embed = discord.Embed(
            title=f"üé≠ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–æ–ª–∏: {action}",
            description=f"–†–æ–ª—å {role.mention}",
            color=role.color if role.color != discord.Color.default() else 0x0099ff,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üìù –ù–∞–∑–≤–∞–Ω–∏–µ",
            value=role.name,
            inline=True
        )
        
        embed.add_field(
            name="üÜî ID",
            value=role.id,
            inline=True
        )
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            value=len(role.members),
            inline=True
        )
        
        embed.add_field(
            name="üîê –ü–æ–∑–∏—Ü–∏—è",
            value=role.position,
            inline=True
        )
        
        embed.add_field(
            name="üé® –¶–≤–µ—Ç",
            value=str(role.color),
            inline=True
        )
        
        embed.add_field(
            name="üîí –£–ø–æ–º–∏–Ω–∞–µ–º–∞—è",
            value="–î–∞" if role.mentionable else "–ù–µ—Ç",
            inline=True
        )
        
        await self.send_log(embed)
    
    async def send_log(self, embed):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª"""
        if not self.enabled or not self.log_channel:
            return
        
        try:
            await self.log_channel.send(embed=embed)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stats['uptime'] = datetime.utcnow() - self.stats['start_time']
        return self.stats.copy()
    
    async def save_logs_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        try:
            logs_data = {
                'stats': self.get_stats(),
                'command_log': self.command_log[-100:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∫–æ–º–∞–Ω–¥
                'performance_log': self.performance_log[-50:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –æ–ø–µ—Ä–∞—Ü–∏–π
                'error_log': self.error_log[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –æ—à–∏–±–æ–∫
            }
            
            with open('enhanced_logs.json', 'w', encoding='utf-8') as f:
                json.dump(logs_data, f, ensure_ascii=False, indent=2, default=str)
                
            logger.info("–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª enhanced_logs.json")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

async def setup_enhanced_logging(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        enhanced_logs = EnhancedLoggingSystem(bot)
        bot.enhanced_logs = enhanced_logs
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        await enhanced_logs.setup_logging()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await setup_enhanced_log_handlers(bot, enhanced_logs)
        
        logger.info("–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def setup_enhanced_log_handlers(bot, enhanced_logs):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @bot.event
    async def on_command(ctx):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ctx._command_start_time = start_time
    
    @bot.event
    async def on_command_completion(ctx):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        if hasattr(ctx, '_command_start_time'):
            execution_time = (time.time() - ctx._command_start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            await enhanced_logs.log_command_usage(ctx, ctx.command.name, execution_time)
    
    @bot.event
    async def on_command_error(ctx, error):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–º–∞–Ω–¥"""
        await enhanced_logs.log_error(error, f"–ö–æ–º–∞–Ω–¥–∞: {ctx.command.name if ctx.command else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    @bot.event
    async def on_member_join(member):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        await enhanced_logs.log_member_join(member)
    
    @bot.event
    async def on_member_remove(member):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        await enhanced_logs.log_member_leave(member)
    
    @bot.event
    async def on_message(message):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message.author.bot:
            await enhanced_logs.log_message_activity(message, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    @bot.event
    async def on_message_edit(before, after):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not before.author.bot:
            await enhanced_logs.log_message_activity(after, "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
    
    @bot.event
    async def on_message_delete(message):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not message.author.bot:
            await enhanced_logs.log_message_activity(message, "–£–¥–∞–ª–µ–Ω–æ")
    
    @bot.event
    async def on_voice_state_update(member, before, after):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        await enhanced_logs.log_voice_activity(member, before, after)
    
    @bot.event
    async def on_raw_reaction_add(payload):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π"""
        await enhanced_logs.log_reaction_activity(payload, "–î–æ–±–∞–≤–ª–µ–Ω–∞")
    
    @bot.event
    async def on_raw_reaction_remove(payload):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π"""
        await enhanced_logs.log_reaction_activity(payload, "–£–¥–∞–ª–µ–Ω–∞")
    
    @bot.event
    async def on_guild_channel_create(channel):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        await enhanced_logs.log_channel_activity(channel, "–°–æ–∑–¥–∞–Ω")
    
    @bot.event
    async def on_guild_channel_delete(channel):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        await enhanced_logs.log_channel_activity(channel, "–£–¥–∞–ª–µ–Ω")
    
    @bot.event
    async def on_guild_role_create(role):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π"""
        await enhanced_logs.log_role_activity(role, "–°–æ–∑–¥–∞–Ω–∞")
    
    @bot.event
    async def on_guild_role_delete(role):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π"""
        await enhanced_logs.log_role_activity(role, "–£–¥–∞–ª–µ–Ω–∞")
    
    @bot.event
    async def on_error(event, *args, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—â–∏–µ –æ—à–∏–±–∫–∏"""
        await enhanced_logs.log_error(Exception(f"–û—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ {event}"), f"–°–æ–±—ã—Ç–∏–µ: {event}")
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    @commands.command(name="logs_stats")
    @commands.has_permissions(administrator=True)
    async def logs_stats(ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        stats = enhanced_logs.get_stats()
        
        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            description="–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞",
            color=0x0099ff,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
            value=str(stats['uptime']).split('.')[0],
            inline=True
        )
        
        embed.add_field(
            name="‚ö° –ö–æ–º–∞–Ω–¥—ã",
            value=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['commands_used']}",
            inline=True
        )
        
        embed.add_field(
            name="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è",
            value=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['messages_sent']}",
            inline=True
        )
        
        embed.add_field(
            name="‚ùå –û—à–∏–±–∫–∏",
            value=f"–ü—Ä–æ–∏–∑–æ—à–ª–æ: {stats['errors_occurred']}",
            inline=True
        )
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: {stats['members_joined']}\n–ü–æ–∫–∏–Ω—É–ª–æ: {stats['members_left']}",
            inline=True
        )
        
        embed.add_field(
            name="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è",
            value=f"–î–µ–π—Å—Ç–≤–∏–π: {stats['moderation_actions']}",
            inline=True
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(name="logs_save")
    @commands.has_permissions(administrator=True)
    async def logs_save(ctx):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        await enhanced_logs.save_logs_to_file()
        
        embed = discord.Embed(
            title="üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            description="–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª enhanced_logs.json",
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(name="logs_status")
    @commands.has_permissions(administrator=True)
    async def logs_status(ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        await enhanced_logs.log_system_status()
        
        embed = discord.Embed(
            title="‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            description="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )
        
        await ctx.send(embed=embed)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫ –±–æ—Ç—É
    bot.add_command(logs_stats)
    bot.add_command(logs_save)
    bot.add_command(logs_status) 